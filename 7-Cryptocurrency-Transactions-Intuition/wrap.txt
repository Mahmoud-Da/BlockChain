*** 47. Plan of Attack ***
# Blockchain Course – Transactions Module

### Introduction

* This module shifts focus from **mining** to **transactions**.
* Blockchain transactions differ significantly from traditional **banking systems**.
* Goal: Understand how transactions, wallets, and privacy work in blockchain.

---

### Key Topics in This Module

1. **Transactions and UTXOs**

   * UTXO = *Unspent Transaction Output*.
   * Core difference between blockchain transactions and banking.
   * First tutorial may feel challenging—concepts are very different.
   * Knowledge is reinforced in the first three tutorials.

2. **Transaction Fees**

   * Where fees come from and how they are applied in blockchain systems.

3. **Wallets**

   * How cryptocurrency wallets work.
   * Practical setup and operation.

4. **Keys and Signatures**

   * Public and private keys.
   * Digital signatures and privacy in blockchain transactions.
   * Includes demo with a tool to visualize key generation and usage.

5. **SegWit (Segregated Witness)**

   * What it is and why it was introduced.
   * Benefits for Bitcoin and other networks.

6. **Public Key vs. Bitcoin Address**

   * Commonly confused concepts clarified.

7. **Hierarchical Deterministic (HD) Wallets**

   * How HD wallets function.
   * Their role in securely managing multiple addresses.

---

### Notes on Scope

* Primary focus will be on **Bitcoin** as a working cryptocurrency.
* Concepts largely apply to other cryptocurrencies (e.g., Litecoin).
* Once the Bitcoin foundation is clear, adapting to other cryptos is easier.

---

### Guidance

* The first tutorial may feel unfamiliar, but the **second and third tutorials reinforce key concepts**.
* By the end of the first three tutorials, learners should understand blockchain transactions well.

---

### Closing

* This module lays the foundation for deeper exploration into blockchain.
* Next step: Begin with transactions and UTXOs.

---

*** 48. Transactions and UTXO's ***
# Blockchain Course – Transactions and UTXOs

### Introduction

* Topic: **Transactions and UTXOs (Unspent Transaction Outputs)** in blockchain.
* Key difference: Blockchain transactions behave differently than **banking transactions**.
* In blockchain, transactions continue to exist as UTXOs until they are used in a new transaction.

---

### What is a UTXO?

* **UTXO = Unspent Transaction Output.**
* Every time you receive Bitcoin (or similar cryptocurrency), you receive it as a UTXO.
* A UTXO remains valid until it is spent in a new transaction.
* Unlike banks, blockchain has **no accounts** and **no balances**.

  * Everything is represented as **transactions recorded on the blockchain**.

---

### Example 1: Receiving Transactions

* Received:

  * Mark → 0.1 BTC
  * Hadelin → 0.3 BTC
  * Helen → 0.6 BTC
  * Susan → 0.7 BTC
* These are all **UTXOs** associated with the recipient.

---

### Example 2: Buying a Bicycle (0.5 BTC)

* Need: 0.5 BTC.
* Choose the 0.6 BTC UTXO from Helen.
* Rule: **Inputs must be fully used**.

  * Cannot partially spend a UTXO.
  * Must use the entire 0.6 BTC.
* Output structure:

  * 0.5 BTC → Bike shop
  * 0.1 BTC → Back to self (change)
* Result:

  * Helen’s 0.6 BTC UTXO is consumed.
  * Two new UTXOs are created:

    * Bike shop: 0.5 BTC
    * Self: 0.1 BTC

---

### Example 3: Buying a Second Bicycle (1.1 BTC)

* Cost: 1.1 BTC.
* Available UTXOs:

  * Hadelin → 0.3 BTC
  * Susan → 0.7 BTC
  * Self → 0.1 BTC
* Combine these three UTXOs to reach 1.1 BTC.
* Output:

  * 1.1 BTC → Bike shop
* Result:

  * All three UTXOs consumed.
  * New UTXO created for bike shop: 1.1 BTC.
  * No change returned to self.

---

### Important Observations

* **Transactions feed into each other.**

  * One transaction consumes previous UTXOs and creates new ones.
  * The blockchain is a continuous chain of transaction outputs and inputs.
* **Balance = sum of UTXOs.**

  * While we think in terms of account balances, in blockchain your "balance" is really the sum of all UTXOs associated with you.

---

### Practice Recommendation

* To better understand:

  1. Imagine receiving different amounts as transactions.
  2. Try constructing transactions for purchases.
  3. Calculate inputs, outputs, and any change sent back to yourself.
* Repetition helps clarify the logic of UTXOs.

---

### Closing

* UTXOs are central to how blockchain transactions operate.
* The system may feel confusing at first, but with practice the logic becomes clear.
* Next tutorials will provide more examples and reinforce the concept.

---


*** 49. Where do transaction fees come from? ***
# Blockchain Course – Transaction Fees and UTXOs

### Introduction

* Review of previous topic: **transactions and UTXOs**.
* Today’s focus: **where transaction fees come from**.
* Builds on prior knowledge while practicing transaction construction.

---

### Scenario Setup

* Current UTXOs available:

  * Mark → 1.0 BTC
  * Sarah → 0.1 BTC
  * Hadelin → 0.4 BTC
  * Ebay → 0.3 BTC
  * Hadelin → 0.3 BTC

* Purchases planned:

  * Bicycle: 0.9 BTC
  * Apple: 0.02 BTC
  * **Total needed: 0.92 BTC**

---

### Constructing the Transaction

* **Inputs selected:**

  * 0.4 BTC (Hadelin)
  * 0.3 BTC (Ebay)
  * 0.3 BTC (Hadelin)
  * Total inputs = 1.0 BTC

* **Outputs:**

  * 0.9 BTC → Bike shop
  * 0.02 BTC → Fruit shop
  * 0.06 BTC → Self (change)

* **Issue:**

  * Total input = 1.0 BTC
  * Total output = 0.98 BTC
  * **Difference = 0.02 BTC (fee)**

---

### How Fees Work

* Any **unaccounted difference** between inputs and outputs becomes the **transaction fee**.
* **No explicit field** for fees in Bitcoin transactions.
* Formula:

-------------------code----------------------
Fee = Total Input – Total Output
-------------------code----------------------
* Purpose: incentivize miners to include the transaction in a block.
* Higher fees → faster inclusion, especially when the mempool is crowded.

---

### Real-World Example (Blockchain.com)

1. **Coinbase Transaction**

   * First transaction in every block.
   * Pays the miner the block reward (e.g., 12.5 BTC at the time).
   * Also includes **all aggregated fees** from other transactions in that block.

2. **Exploring Transactions**

   * UTXOs feed into new transactions.
   * Blockchain explorers (like blockchain.com) show how inputs link to outputs.
   * **Tree charts** visualize the chain of UTXOs feeding into larger and larger transactions.

3. **Example Observed**

   * Small UTXOs (0.2 BTC, 0.3 BTC, etc.) combine into larger ones.
   * Eventually resulted in a **270 BTC transaction (\~\$2.7M at \$10k/BTC)**.
   * Demonstrates how transactions compound into larger flows.

---

### Key Takeaways

* Blockchain has **no accounts or balances**; only UTXOs.
* **Transaction fees** are simply the leftover difference from inputs and outputs.
* Miners earn both:

  * Block rewards.
  * Aggregated transaction fees.
* Tools like blockchain explorers help visualize and trace how UTXOs move and accumulate.

---

*** 50. How wallets work ***
# Blockchain Course – How Wallets Work

### Recap

* Previous tutorials covered:

  * Transactions and UTXOs (Unspent Transaction Outputs)
  * Transaction fees
* Today’s focus: **wallets** and how they present balances.

---

### Key Idea

* In blockchain, there is **no actual “balance”** stored.
* The blockchain only contains **lists of transactions** in blocks.
* Example blocks:

  * Block 501 → Original transactions
  * Block 502 → Bike purchase and another transaction
  * Block 503 → Additional transactions
  * Block 504 → Another bike purchase

---

### How a Wallet Works

* A wallet does **not** store coins or balances.
* Instead, it:

  1. Scans the blockchain.
  2. Identifies **all transactions with outputs directed to you**.
  3. Determines which of those outputs are **still unspent (UTXOs)**.
  4. Adds them up and shows the sum as your **wallet balance**.

---

### Example Walkthrough

1. **Day 1 – First Bike Purchase**

   * 0.6 BTC from Helen → Split into:

     * 0.5 BTC to bike shop
     * 0.1 BTC back to self
   * Result: Output spent (marked as used).

2. **Day 2 – Second Bike Purchase**

   * Inputs: UTXOs from Hadelin, Susan, and self.
   * All spent on bike purchase.
   * Outputs marked as used.

3. **Day 3 – Third Bike + Apple Purchase**

   * Inputs:

     * 0.04 BTC from Hadelin
     * 0.03 BTC from eBay
     * 0.3 BTC from Hadelin
   * Outputs: Bike shop, fruit shop, change, fee.
   * Inputs marked as used.

---

### Wallet Balance Calculation

* Wallet looks at **all outputs ever sent to you**.
* Then filters to see which are **still unspent**.
* Example:

  * Out of all received outputs, only 3 remain unspent.
  * Add them: 0.26 BTC.
* Displayed as your “balance” on screen.

---

### Important Notes

* In reality, there are:

  * **No coins**
  * **No numbers stored as balances**
  * Only **UTXOs in the blockchain**
* Banking vs Blockchain:

  * **Bank** → Balance exists as a number in the bank’s ledger.
  * **Blockchain** → Balance is just the total of your UTXOs.

---

### Significance

* Wallets provide a **user-friendly illusion of balance**.
* Crucial for understanding how blockchain is **different from banking**.
* Especially important for:

  * Investors in cryptocurrencies
  * Developers building cryptocurrency systems

---

*** 51. Signatures: Private & Public Keys ***
# Blockchain Lecture Notes

## Topic: Signatures, Private and Public Keys

### 1. Background Context

* Previously covered:

  * Transactions
  * UTXOs (Unspent Transaction Outputs)
  * Fees
  * Wallet balances
* Problem: Blockchain transactions are public and visible.

  * Anyone can see “who sent money to whom.”
  * Without safeguards, anyone could attempt to create a fraudulent transaction using someone else’s UTXOs.

### 2. The Privacy Problem

* Example:

  * Attacker could calculate Adlon’s UTXOs and create a transaction like
    “Adlon sends Sarah money.”
  * This transaction might be accepted into the mempool if valid UTXOs are referenced.
  * Risk: Adlon could lose money.
* Question: How does blockchain prevent this?
* Answer: Through **signatures**, **private keys**, and **public keys**.

### 3. Private and Public Keys

* **Private key**:

  * Unique identifier.
  * Must be kept secret.
  * Equivalent to a password for a bank account.
* **Public key**:

  * Derived from the private key.
  * Can be shared publicly.
  * Equivalent to a bank account number.
* Rule:

  * Private key = needed to send money.
  * Public key = needed for others to send you money.

### 4. Messages and Transactions

* In blockchain, a “message” = transaction.
* Example: “Sarah sends Carol 0.7 BTC.”
* To secure it, the message is **signed with the private key** → generates a **digital signature**.

### 5. Digital Signature Process

* **Step 1**: User creates a transaction.
* **Step 2**: Transaction is combined with private key → produces a **unique signature**.
* **Step 3**: Transaction, signature, and public key are broadcast.
* **Step 4**: Network verification:

  * Anyone with the transaction, signature, and public key can run a verification function.
  * Function outputs **Yes/No**:

    * Yes → Signature valid, transaction authorized.
    * No → Signature invalid.

### 6. Security Properties

* From private key → deterministically generate public key.
* From public key → **cannot reverse engineer** private key.
* Verification uses elliptic curve cryptography (not SHA-256).
* Ensures:

  * Only the private key holder can sign transactions.
  * Everyone can verify with the public key.

### 7. Blockchain Implementation

* Each transaction includes:

  * Message (transaction details)
  * Signature (proof of authorization)
  * Public key (for verification)
* Miners and nodes verify transactions before including them in blocks.
* Example:

  * Sarah wants to send Adlon 0.1 BTC.
  * Sarah signs the transaction with her private key.
  * Signature + public key are attached.
  * Nodes confirm that only Sarah could have produced that signature.

### 8. Key Takeaways

* Private key = secret, never shared.
* Public key = shared openly, safe to publish.
* Signature = proof that a transaction is authorized by the private key holder.
* This system ensures security and prevents fraudulent transactions.

---



*** 52. Signatures & Keys Demo ***
# Blockchain Lecture Notes

## Demo: Private Keys, Public Keys, and Signatures

### 1. Demo Resource

* Demo available at:
  **tools.superdatascience.com/blockchain/public-private-keys/keys**
* Created by Anders Brownworth (openly available for learning).
* Hosted by SuperDataScience, with GitHub access for those who want to run it themselves.

---

### 2. Private and Public Keys

* **Private key**

  * Randomly generated large number.
  * Must remain secret.
  * Example: entering a custom value also produces a valid key.
  * Warning: short or simple private keys (e.g., "12") are insecure because they can be guessed.

* **Public key**

  * Deterministically derived from the private key.
  * Fixed length, shown as a hexadecimal string.
  * Safe to share publicly.
  * Used by others to verify transactions or send funds.

---

### 3. Digital Signatures

* **Process**

  1. User creates a message/transaction.
  2. Message is signed with the private key → produces a **signature**.
  3. Signature and public key travel with the message.
  4. Anyone can verify using:

     * Message
     * Signature
     * Public key

* **Verification**

  * If valid → confirms the message was signed by the private key corresponding to the public key.
  * If tampered or forged → verification fails.

* **Key Points**

  * Signature proves authenticity.
  * Private key is never shared.
  * Public key allows verification without revealing the private key.

---

### 4. Demo Example: Message Signing

* Example transaction:
  *“Hadelin sends Kirill 0.2 BTC”*
* After signing:

  * Message + signature + public key are broadcast.
* Network verification:

  * Only works if the signature was produced by the private key linked to the public key.
  * If the message or signature is changed, verification fails.

---

### 5. Demo Example: Transaction Signing

* Transaction fields:

  * Amount, sender address, recipient address.
* Process is identical:

  * Private key signs transaction.
  * Signature + public key + message form the verification set.
* Verification requires all three components.
* Important note:

  * The demo had a minor bug (tampering with certain fields still verified).
  * Normally, any modification should cause verification to fail.

---

### 6. Key Takeaways

* **Private key**: secret, used for signing.
* **Public key**: public, used for verification.
* **Signature**: cryptographic proof that a message or transaction was authorized by the private key holder.
* **Verification**: ensures authenticity, prevents forgery, and protects against tampering.

---


*** 53. What is Segregated Witness (SegWit) ***
---

# Blockchain Lecture Notes

## Topic: Segregated Witness (SegWit)

### 1. Introduction

* SegWit = Segregated Witness
* Purpose: Improve Bitcoin network efficiency and prepare for discussions on technical topics.
* Focus: Overview, not deep technical details.

---

### 2. Block Structure Recap

* Example: Block 500,112
* Components:

  * Block Number
  * Timestamp
  * Nonce
  * Previous Hash
  * Hash
  * Other fields → collectively called the **block header** (metadata, not transactions).
* Transactions = main body of the block.

---

### 3. Block Size Limitation

* Bitcoin block size = 1 MB (original design).
* Reasons for 1 MB limit:

  1. Small block → fewer transactions → network delays.
  2. Large block → slower propagation → more orphaned blocks, potential security risks.
* Problem observed: As Bitcoin adoption increased (2017), transaction backlogs and slow processing occurred.

---

### 4. Solutions to Block Size Problem

* Two approaches considered:

  1. **Hard Fork** → increase block size (resulted in Bitcoin Cash).
  2. **Soft Fork** → Segregated Witness (SegWit).
* **Soft Fork**:

  * Upgrade compatible with existing nodes.
  * Gradually adopted by network participants.

---

### 5. SegWit Concept

* Focus: Reduce transaction size without changing block size.
* Key idea: Separate signature data (witness data) from transaction data.
* Transaction includes:

  * Sender address
  * Recipient address
  * Amount
  * Signature
  * Public key
* Problem: Signature + public key = \~60% of transaction size → reduces block capacity.

---

### 6. How SegWit Works

* **ScriptSig** (signature and related data) is removed from the main transaction message.
* Sent separately as **witness data** through its own channel.
* Benefits:

  * Frees up block space
  * More transactions fit per block
  * Speeds up network propagation
* Adoption date: August 24, 2017
* Backward compatible → non-upgraded nodes still operate normally.

---

### 7. Misconception About Block Size

* Some claim SegWit “increased block size to 2 MB.”
* Clarification:

  * Actual block size = 1 MB (unchanged)
  * Because witness data is separated, the effective transaction capacity feels like \~2–4 MB.
  * More transactions can be included without increasing the official block size.

---

### 8. Naming

* “Segregated Witness” = segregated (separated) signature (witness) data.

---

### 9. Broader Implications

* SegWit improves **network throughput** and **speed**.
* Bitcoin throughput: \~10 transactions/sec
* Comparison: Visa/MasterCard → tens of thousands of transactions/sec
* SegWit = one step toward reducing latency and increasing transaction capacity.
* Litecoin and other cryptocurrencies also use SegWit.

---

### 10. Further Reading

* Recommended: Jimmy Song

  * Article: *Understanding SegWit Block Size*
  * Medium article provides deeper technical insight
  * Note: Technical, may require some effort to understand fully

---

### 11. Key Takeaways

* SegWit separates signature data from transaction data to reduce effective transaction size.
* Soft fork → backward compatible and gradual adoption.
* Increases block efficiency without changing the official 1 MB limit.
* Improves Bitcoin network throughput and scalability.

---
